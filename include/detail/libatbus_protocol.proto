syntax = "proto3";

package atbus.protocol;

option optimize_for = SPEED;
// option optimize_for = LITE_RUNTIME;
// option optimize_for = CODE_SIZE;
// --cpp_out=lite:,--cpp_out=
option cc_enable_arenas = true;

enum ATBUS_PROTOCOL_CONST {
    option allow_alias             = true;
    ATBUS_PROTOCOL_CONST_UNKNOWN   = 0;
    ATBUS_PROTOCOL_VERSION         = 3;
    ATBUS_PROTOCOL_MINIMAL_VERSION = 3; // minimal protocol version supported
}

enum ATBUS_FORWARD_DATA_FLAG_TYPE {
    FORWARD_DATA_FLAG_NONE = 0;
    // all flags must be power of 2
    FORWARD_DATA_FLAG_REQUIRE_RSP = 1;
}

enum ATBUS_ENDPOINT_FLAG_TYPE {
    ATBUS_ENDPOINT_FLAG_RESETTING         = 0; /** if endpoint is reseting **/
    ATBUS_ENDPOINT_FLAG_CONNECTION_SORTED = 1; /** if all connection in endpoints are sorted **/
    ATBUS_ENDPOINT_FLAG_DESTRUCTING       = 2; /** if endpoint is destructing **/
    ATBUS_ENDPOINT_FLAG_HAS_LISTEN_PORC   = 3; /** if endpoint has connection that need to call proc interval **/
    ATBUS_ENDPOINT_FLAG_HAS_LISTEN_FD     = 4; /** if endpoint has connection with fd backend **/

    ATBUS_ENDPOINT_FLAG_MUTABLE_FLAGS   = 20; /** endpoint mutable flags start here **/
    ATBUS_ENDPOINT_FLAG_HAS_PING_TIMER  = 21; /** if endpoint has setup a ping timer **/
    ATBUS_ENDPOINT_FLAG_CUSTOM_LIFETIME = 22; /** if endpoint has setup a ping timer **/

    // flag index can not be greater than 31
}

message custom_command_argv { bytes arg = 1; }

message custom_command_data {
    uint64                       from        = 1;
    repeated custom_command_argv commands    = 2;
    repeated access_data         access_keys = 3;
}

message forward_data {
    uint64          from    = 1;
    uint64          to      = 2;
    repeated uint64 router  = 3;
    bytes           content = 4;
    uint32          flags   = 5;
}

message access_data {
    uint32 token_salt  = 1;
    uint64 token_hash1 = 2;
    uint64 token_hash2 = 3;
}

message channel_data { string address = 1; }

message node_data {
    uint64             bus_id             = 1;
    bool               overwrite          = 2;
    bool               flags              = 3;
    uint64             children_id_mask   = 4;
    uint64             children_id_prefix = 5;
    repeated node_data children           = 6;
}

message node_tree { repeated node_data nodes = 1; }

message ping_data { int64 time_point = 1; }

message subnet_range {
    uint64 id_prefix = 1;
    uint32 mask_bits = 2; // suffix
}

message register_data {
    uint64                bus_id        = 1;
    int32                 pid           = 2;
    string                hostname      = 3;
    repeated channel_data channels      = 4;
    uint32                flags         = 7;
    repeated access_data  access_keys   = 8;
    repeated subnet_range subnets       = 9;
    string                hash_code     = 10;
    string                local_address = 11;
    repeated string       gateways      = 12; // gateway or proxy address list
}

message connection_data { channel_data address = 1; }

message external_resource {
    string namespace_name = 1;
    string api_version    = 2;
    string kind           = 3;

    string service_name    = 21;
    string service_version = 22;
    string service_subset  = 23;

    map<string, string> labels = 101;
}

message msg_head {
    int32  version     = 1;
    int32  type        = 2;
    sint32 ret         = 3;
    uint64 sequence    = 4;
    uint64 src_bus_id  = 5;
    uint64 dst_bus_id  = 6; // version: 3, all protocol support proxy
    uint64 retry_times = 7; // version: 3, auto retry

    // 1024-2047 for external system usage, atbus do not use these fields directly
    external_resource ingress = 1024; // for external load balance system, such as kubernetes
}

message msg {
    msg_head head = 1;
    oneof    msg_body {
        custom_command_data custom_command_req = 11;
        custom_command_data custom_command_rsp = 12;
        forward_data        data_transform_req = 13;
        forward_data        data_transform_rsp = 14;
        node_tree           node_sync_req      = 15;
        node_tree           node_sync_rsp      = 16;
        register_data       node_register_req  = 17;
        register_data       node_register_rsp  = 18;
        connection_data     node_connect_sync  = 20;
        ping_data           node_ping_req      = 21;
        ping_data           node_pong_rsp      = 22;
    }
}

service atbus_service {
    rpc send_msg(stream msg) returns (stream msg) {}
}
